Portfolio Website with PostgreSQL Integration Guide

1. Database Setup
----------------
First, click the "Connect to Supabase" button in the top right to set up your database connection.

Once connected, create the messages table in your Supabase database:

```sql
CREATE TABLE messages (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- Create policy to allow inserting messages
CREATE POLICY "Allow anonymous message submission" 
ON messages FOR INSERT 
TO anon
WITH CHECK (true);

-- Create policy to allow reading messages (you might want to restrict this)
CREATE POLICY "Allow authenticated users to read messages" 
ON messages FOR SELECT 
TO authenticated 
USING (true);
```

2. Environment Setup
-------------------
Make sure your .env file contains the Supabase connection details (these will be added automatically when you connect to Supabase):

```
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

3. Integration Steps
-------------------
1. Install the Supabase client:
   ```bash
   npm install @supabase/supabase-js
   ```

2. Create a new file `src/lib/supabase.ts`:
   ```typescript
   import { createClient } from '@supabase/supabase-js'

   const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
   const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

   export const supabase = createClient(supabaseUrl, supabaseAnonKey)
   ```

3. Update the handleSubmit function in App.tsx:
   ```typescript
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault()
     try {
       const { error } = await supabase
         .from('messages')
         .insert([formData])
       
       if (error) throw error
       
       // Success! Clear the form
       setFormData({ name: '', email: '', message: '' })
       alert('Message sent successfully!')
     } catch (error) {
       console.error('Error sending message:', error)
       alert('Failed to send message. Please try again.')
     }
   }
   ```

4. Viewing Messages
------------------
To view submitted messages, you can:

1. Use the Supabase Dashboard:
   - Go to your Supabase project
   - Navigate to Table Editor
   - Select the 'messages' table

2. Or query programmatically:
   ```typescript
   const { data, error } = await supabase
     .from('messages')
     .select('*')
     .order('created_at', { ascending: false })
   ```

Security Notes
-------------
- The current setup allows anyone to submit messages (good for a contact form)
- Only authenticated users can read messages
- Consider adding rate limiting or spam protection for production use
- Always validate and sanitize input data before storing
- Never expose sensitive data in client-side code

Maintenance
----------
- Regularly backup your database
- Monitor for spam or abuse
- Keep dependencies updated
- Review security policies periodically